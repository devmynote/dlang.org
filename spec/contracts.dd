Ddoc

$(SPEC_S 契約プログラミング,

$(HEADERNAV_TOC)

        $(P Contracts enable specifying conditions that must hold true
        when the flow of runtime execution reaches the contract.
        If a contract is not true, then the program is assumed to have entered
        an undefined state.)

        $(RATIONALE
        $(P Building contract support into the language provides:)

        $(OL
        $(LI a consistent look and feel for the contracts)
        $(LI tool support)
        $(LI the implementation can generate better code using information gathered
        from the contracts)
        $(LI easier management and enforcement of contracts)
        $(LI handling of contract inheritance)
        )
        )

$(HTMLTAG3V img, src="$(ROOT_DIR)images/d4.gif" style="max-width:100%" alt="Contracts make D bug resistant" border="0")

$(H2 $(LNAME2 assert_contracts, Assert 契約))

        $(P See $(GLINK2 expression, AssertExpression).)

$(H2 $(LNAME2 pre_post_contracts, 事前、事後契約))

        $(P See $(LINK2 function, contracts). )

$(H2 $(LNAME2 Invariants, 不変条件))

        $(P See $(DDSUBLINK struct, Invariant, Struct Invariants) and $(DDSUBLINK class, invariants, Class Invariants).)


$(H2 $(LNAME2 references, 参考文献))

        $(LIST
        $(LINK2 https://web.archive.org/web/20080919174640/http://people.cs.uchicago.edu/~robby/contract-reading-list/, Contracts Reading List),
        $(LINK2 http://jan.newmarch.name/java/contracts/paper-long.html, Adding Contracts to Java)
        )

$(SPEC_SUBNAV_PREV_NEXT template-mixin, ミックスイン[Template Mixins], version, 条件コンパイル[Conditional Compilation])
)

Macros:
        CHAPTER=23
        TITLE=契約プログラミング
