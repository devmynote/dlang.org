Ddoc

$(SPEC_S はじめに,

$(P Dは、汎用システムプログラミング言語で、ネイティブコードにコンパイルされます。
Cライクな構文を持ち、静的に型付けされます。$(LPAREN)ガベージコレクション$(RPAREN)による自動メモリ管理をサポートします。
手動でのメモリ管理にも対応しています。
D言語のプログラムは、ネイティブライブラリや実行可能ファイルを作成するために、
個別にコンパイルし外部ライブラリとリンク可能なモジュールとして構成されます。)

$(P このドキュメントは、プログラミング言語Dのリファレンスマニュアルです。 詳細な情報やその他のドキュメントについては
$(COMMA) $(LINK2 https://dlang.org/, D言語のWebサイト)を参照してください。)

$(H2 コンパイルのフェーズ)

$(P コンパイルのプロセスは複数のフェーズに分かれています。各フェーズは、後続のフェーズから独立しています。
たとえば、構文解析スキャナーは意味解析の影響を受けません。パスの分離により、構文解析を行うエディターなどのツールを比較的簡単に作成できます。)

$(OL
        $(LI $(B ソースの文字セット)$(BR)

        ソースファイルをチェックすることでエンコーディングが決定され、適切な解析スキャナーがロードされます。
        7ビットのASCIIおよびUTFエンコーディングに対応しています。
        )

        $(LI $(B スクリプト行) $(BR)

        最初の行が "$(HASH)!" で始まる場合、その行はスクリプト行として無視されます。
        )

        $(LI $(B 字句解析)$(BR)

        ソースファイルは一連のトークンに分割されます。
        $(DDSUBLINK spec/lex, specialtokens, スペシャルトークン(Special tokens))
        は、他のトークンに置き換えられます。
        $(GLINK_LEX スペシャルトークンシーケンス(SpecialTokenSequence))
        は、処理後に削除されます。
        )

        $(LI $(B 構文解析)$(BR)

        トークンのシーケンスが解析されて、構文ツリーが形成されます。
        )

        $(LI $(B 意味解析)$(BR)

        構文ツリーをもとに、変数の宣言、シンボルテーブルのロード、タイプの割り当て、およびプログラムの意味を決定します。
        )

        $(LI $(B 最適化)$(BR)

        最適化は、意味的に同等でパフォーマンスが高くなるプログラムに書き換えるためのオプションパスです。
        )

        $(LI $(B コード生成)$(BR)

        プログラムを実装するために、ターゲットアーキテクチャから命令が選択されます。
        典型的な結果として、リンカへの入力に適したオブジェクトファイルになります。
        )
)


$(H2 $(LINK2 memory-model, メモリモデル))

    $(P The $(I byte) is the fundamental unit of storage. Each byte has 8 bits and is stored at
    a unique address. A $(I memory location) is a sequence of one or more bytes of the exact size
    required to hold a scalar type. Multiple threads can access separate memory locations
    without interference.
    )

    $(P Memory locations come in three groups:)

    $(OL
    $(LI $(I Thread-local memory locations) are accessible from only one thread at a time.)
    $(LI $(I Immutable memory locations) cannot be written to during their lifetime. Immutable
    memory locations can be read from by multiple threads without synchronization.)
    $(LI $(I Shared memory locations) are accessible from multiple threads.)
    )

    $(UNDEFINED_BEHAVIOR Allowing multiple threads to access a thread-local memory
    location results in undefined behavior.)

    $(UNDEFINED_BEHAVIOR Writing to an immutable memory location during its lifetime
    results in undefined behavior.)

    $(UNDEFINED_BEHAVIOR Writing to a shared memory location in
    one thread while one or more additional threads read from or write to the same location is
    undefined behavior unless all of the reads and writes are synchronized.)

    $(P Execution of a single thread on thread-local and immutable memory locations
    is $(I sequentially consistent). This means the collective result of the operations
    is the same as if they were executed in the same order that the operations appear in the program.
    )

    $(P A memory location can be transferred from thread-local to immutable or shared
    if there is only one reference to the location.)

    $(P A memory location can be transferred from shared to immutable or thread-local
    if there is only one reference to the location.)

    $(P A memory location can be temporarily transferred from shared to local if
    synchronization is used to prevent any other threads from accessing the memory
    location during the operation.)


$(H2 $(LNAME2 object-model, オブジェクトモデル))

    $(P An $(I object) is created in the following circumstances:
    )

    $(UL
    $(LI a definition)
    $(LI a $(GLINK2 expression, NewExpression))
    $(LI a temporary is created)
    $(LI changing which field of a union is active)
    )

    $(P An object spans a sequence of memory locations which may or may not
    be contiguous. Its lifetime encompasses construction, destruction, and the period in between.
    Each object has a type which is determined either statically or by runtime
    type information.
    The object's memory locations may include any combination of thread-local, immutable, or
    shared.
    )

    $(P Objects can be composed into a $(I composed object). Objects that make up
    a composed object are $(I subobjects). An object that is not the subobject
    of another object is a $(I complete object). The lifetime of a subobject
    is always within the lifetime of the complete object to which it belongs.
    )

    $(P An object's address is the address of the first byte of the first memory
    location for that object. Object addresses are distinct unless one
    object is nested within the other.
    )

$(H2 $(LNAME2 arithmetic, 四則演算))

    $(H3 Integer Arithmetic)

    $(P Integer arithmetic is performed using
    $(LINK2 https://en.wikipedia.org/wiki/Two%27s_complement, two's complement) math.
    Integer overflow is not checked for.
    )

    $(H3 Floating Point Arithmetic)

    $(P Floating point arithmetic is performed using
    $(LINK2 https://en.wikipedia.org/wiki/IEEE_754, IEEE-754 floating point math).)

$(SPEC_SUBNAV_NEXT lex, Lexical)
)

Macros:
TITLE = Introduction
CHAPTER = 1
