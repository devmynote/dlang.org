Ddoc

$(SPEC_S はじめに,

$(HEADERNAV_TOC)

$(P D言語は汎用システムプログラミング言語で、ネイティブコードにコンパイルされます。
Cライクな構文を持ち、静的に型付けされます。ガベージコレクションによる自動メモリ管理をサポートしますが、
手動でのメモリ管理にも対応しています。
ネイティブライブラリや実行可能ファイルを作成するために、D言語のプログラムは、
個別にコンパイルし外部ライブラリとリンク可能なモジュールとして構成されます。)

$(P このドキュメントは、プログラミング言語Dのリファレンスマニュアルです。 詳細な情報やその他のドキュメントについては
$(COMMA) $(LINK2 https://dlang.org/, D言語のWebサイト)を参照してください。)

$(H2 $(LNAME2 compile-phase, コンパイル))

$(P コンパイルは複数のフェーズに分かれます。各フェーズは、後続のフェーズから独立しています。
たとえば、構文解析スキャナーは意味解析の影響を受けません。フェーズの分離により、構文解析を行うエディターなどのツールを比較的簡単に作成できます。)

$(OL
        $(LI $(B ソースファイルの文字セット)$(BR)

        ソースファイルをチェックすることでエンコーディングが決定され、適切な解析スキャナーがロードされます。
        7ビットのASCIIおよびUTFエンコーディングに対応しています。
        )

        $(LI $(B スクリプト行) $(BR)

        最初の行が "$(HASH)!" で始まる場合、その行はスクリプト行として無視されます。
        )

        $(LI $(B 字句解析)$(BR)

        ソースファイルは一連のトークンに分割されます。
        $(DDSUBLINK spec/lex, specialtokens, スペシャルトークン$(LPAREN)Special tokens$(RPAREN))
        は、他のトークンに置き換えられます。
        $(DDSUBLINK spec/lex, special-token-sequence, スペシャルトークンシーケンス$(LPAREN)SpecialTokenSequence$(RPAREN))
        は、処理後に削除されます。
        )

        $(LI $(B 構文解析)$(BR)

        トークンが順序通りに解析されて、構文ツリーが形成されます。
        )

        $(LI $(B 意味解析)$(BR)

        構文ツリーから、変数の宣言、シンボルテーブルのロード、型の割り当て、およびプログラムの意味を決定します。
        )

        $(LI $(B 最適化)$(BR)

        最適化は、意味的に同等でパフォーマンスが高くなるプログラムに書き換えるためのオプションパスです。
        )

        $(LI $(B コード生成)$(BR)

        プログラムを実装するために、ターゲットアーキテクチャから命令が選択されます。
        典型的な結果として、リンカへの入力に適したオブジェクトファイルになります。
        )
)


$(H2 $(LNAME2 memory-model, メモリモデル))

    $(P $(I バイト) はストレージの基本単位です。 各バイトは8ビットで、一意のアドレスに格納されます。
    $(I メモリロケーション) は、スカラー型を保持するために必要な1バイト以上のシーケンスです。
    複数のスレッドは、別々のメモリロケーションに干渉することなくアクセスできます。
    )

    $(P メモリロケーションは3つのグループに分けられます:)

    $(OL
    $(LI $(I スレッドローカルなメモリロケーション) は、一度に1つのスレッドからのみアクセスできます。)
    $(LI $(I immutable なメモリロケーション) は、ライフタイム中は書き込むことができません。 immutable な
    メモリロケーションは同期せずに複数のスレッドから読み取ることができます。)
    $(LI $(I shared メモリロケーション) は、複数のスレッドからアクセスできます。)
    )

    $(未定義動作 複数のスレッドをスレッドローカルなメモリロケーションにアクセスさせることは、未定義の動作になります。)

    $(未定義動作 ライフタイム中の immutable なメモリロケーションへの書き込みは、未定義の動作になります。)

    $(未定義動作 1つ以上のスレッドが shared メモリロケーションの読み取りまたは書き込みを行っている間に、
    他のスレッドが同じ場所に書き込むことは、すべての読み取りと書き込みが同期されていない限り、未定義の動作になります。)

    $(P スレッドローカルおよび immutable なメモリロケーションでの単一スレッドの実行は、$(I 順次一貫性)があります。
    これは、メモリ操作の集合的な結果が、プログラムに表示される順序で実行された場合と同じであることを意味します。
    )

    $(P メモリロケーションへの参照が1つしかない場合は、メモリロケーションをスレッドローカルから
    immutable や shared に移すことができます。)

    $(P メモリロケーションへの参照が1つしかない場合は、メモリロケーションを
    shared から immutable やスレッドローカルに移すことができます。)

    $(P メモリ操作中に他のスレッドがメモリロケーションにアクセスするのを防ぐために同期が使用されている場合、
    メモリロケーションを shared　からスレッドローカルに、一時的に移すことができます。)


$(H2 $(LNAME2 object-model, オブジェクトモデル))

    $(P $(I オブジェクト) は、次の状況で作成されます。
    )

    $(UL
    $(LI 定義時)
    $(LI $(GLINK2 expression, NewExpression))
    $(LI テンポラリ作成時)
    $(LI unionのアクティブなフィールドの変更時)
    )

    $(P オブジェクトは、連続または不連続な一連のメモリロケーションに及びます。
    ライフタイムは、コンストラクションからデストラクション、その間を含みます。
    オブジェクトには、静的または実行時型情報によって決定される型があります。
    オブジェクトのメモリロケーションには、スレッドローカル, immutable,
    sharedの任意の組み合わせを含めることができます。
    )

    $(P オブジェクトは、$(I 構成されたオブジェクト)に構成することができます。
    構成されたオブジェクトを構成するオブジェクトは$(I サブオブジェクト)です。
    他のオブジェクトのサブオブジェクトではないオブジェクトは、$(I 完結したオブジェクト)です。
    サブオブジェクトのライフタイムは、それが属する完結したオブジェクトのライフタイム内に常にあります。
    )

    $(P オブジェクトのアドレスは、そのオブジェクトの最初のメモリロケーションの最初のバイトのアドレスです。
    1つのオブジェクトが他のオブジェクト内にネストされていない限り、オブジェクトアドレスは区別されます。
    )

$(H2 $(LNAME2 arithmetic, 四則演算))

    $(H3 整数の四則演算)

    $(P 整数の四則演算は、$(LINK2 https://en.wikipedia.org/wiki/Two%27s_complement, 2の補数)
    演算を使用して実行されます。整数のオーバーフローはチェックしません。
    )

    $(H3 浮動小数点数の四則演算)

    $(P 浮動小数点数の四則演算は、
    $(LINK2 https://en.wikipedia.org/wiki/IEEE_754, IEEE-754 浮動小数点演算)を使用して実行されます。)

$(SPEC_SUBNAV_NEXT lex, 字句の構成[Lexical])
)

Macros:
TITLE = はじめに
CHAPTER = 1
