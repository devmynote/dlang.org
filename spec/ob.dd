Ddoc

$(SPEC_S @live,

$(HEADERNAV_TOC)

$(B Experimental, Subject to Change, use `-preview=dip1021` to activate)

$(P If a memory object has only one pointer to it, that pointer is the $(I owner)
of the memory object. With the single owner, it becomes straightforward to
manage the memory for the object. It also becomes trivial to synchronize access
to that memory object among multiple threads, because it can only be accessed
by the thread that controls that single pointer.
)

$(P This can be generalized to a graph of memory objects interconnected by pointers,
where only a single pointer connects to that graph from elsewhere. That single
pointer becomes the $(I owner) of all the memory objects in that graph.
)

$(P When the owner of the graph is no longer needed, then the graph of memory
objects it points to is no longer needed and can be safely disposed of. If the owner
itself is no longer in use (i.e. is no longer $(I live)) and the owned memory
objects are not disposed of, an error can be diagnosed.
)

$(P Hence, the following errors can be statically detected:
)

---
int* allocate();    // allocate a memory object
void release(int*); // deallocate a memory object

@live void test()
{
    auto p = allocate();
}   // error: p is not disposed of

@live void test()
{
    auto p = allocate();
    release(p);
    release(p); // error: p was already disposed of
}

@live void test()
{
    int* p = void;
    release(p); // error, p does not have a defined value
}

@live void test()
{
    auto p = allocate();
    p = allocate(); // error: p was not disposed of
    release(p);
}
---

$(P Functions with the `@live` attribute enable diagnosing these sorts of errors by
tracking the status of owner pointers.
)

$(H2 $(LNAME2 ob, 所有権と借用))

$(P Tracking the ownership status of a pointer can be safely extended by adding the
capability of temporarilly $(I borrowing) ownership of a pointer from the $(I owner).
The $(I owner) can no longer use the pointer as long as the $(I borrower) is still
using the pointer value (i.e. is $(I live)). Once the $(I borrower) is no longer
$(I live), the $(I owner) and resume using it. Only one $(I borrower) can be live
at any point.
)

$(P Multiple $(I borrower) pointers can simultaneously exist if all of them are
pointers to read only (`const` or `immutable`) data, i.e. none of them can modify the memory
object(s) pointed to.
)

$(P This is collectively called an $(I Ownership/Borrowing) system. It can be state as:
)

$(BLOCKQUOTE At any point in the program, for each memory object,
there is exactly one live mutable pointer to it or all the live pointers to
it are read-only.)

$(P Function declarations annotated with the `@live` attribute are checked for compliance with
the Ownership/Borrowing rules. The checks are run after other semantic processing is complete.
The checking does not influence code generation.
)

$(P Whether a pointer is allocated memory using the GC or some other
storage allocator is immaterial to OB, they are not distinguished and are
handled identically.
)

$(P Class references are assumed to be allocated using either the GC or are allocated
on the stack as `scope` classes, and are not tracked.
)

$(P If `@live` functions
call non-`@live` functions, those called functions are expected to present
an `@live` compatible interface, although it is not checked.
if non-`@live` functions call `@live` functions, arguments passed are
expected to follow `@live` conventions.
)

$(P It will not detect attempts to dereference `null` pointers or possibly
`null` pointers. This is unworkable because there is no current method
of annotating a type as a non-`null` pointer.
)

$(H3 $(LNAME2 tracked, ポインタの追跡))

$(P The only pointers that are tracked are those declared in the `@live` function
as `this`, function parameters or local variables. Variables from other
functions are not tracked, even `@live` ones, as the analysis of interactions
with other functions depends
entirely on that function signature, not its internals.
Parameters that are `const` are not tracked.
)


$(H3 $(LNAME2 state, ポインターの状態))

$(P Each tracked pointer is in one of the following states:
)

$(DL
$(DT Undefined)

$(DD The pointer is in an invalid state. Dereferencing such a pointer is
an error.)

$(DT Owner)

$(DD The owner is the sole pointer to a memory object graph.
An Owner pointer normally does not have a `scope` attribute.
If a pointer with the `scope` attribute is initialized
with an expression not derived from a tracked pointer, it is an Owner.

If an Owner pointer is assigned to another Owner pointer, the
former enters the Undefined state.
)

$(DT Borrowed)

$(DD A Borrowed pointer is one that temporarily becomes the sole pointer
to a memory object graph. It enters that state via assignment
from an owner pointer, and stays in that state
until its last use.

A Borrowed pointer must have the `scope` attribute and must
be a pointer to mutable.
)

$(DT Readonly)

$(DD A Readonly pointer acquires its value from an Owner.
While the Readonly pointer is live, only Readonly pointers can
be acquired from that Owner.
A Readonly pointer must have the `scope` attribute and also
must not be a pointer to mutable.
)
)

$(H3 $(LNAME2 lifetime, ライフタイム))

$(P The lifetime of a Borrowed or Readonly pointer value starts when it is
assigned a value from an Owner or another Borrowed pointer, and ends at
the last read of that value.
)

$(P This is also known as $(I Non-Lexical Lifetimes).
)


$(H3 $(LNAME2 transition, ポインターの状態遷移))

$(P A pointer changes its state when one of these operations is done to it:
)

$(UL
$(LI storage is allocated for it (such as a local variable on the stack),
which places the pointer in the Undefined state)

$(LI initialization (treated as assignment))

$(LI assignment - the source and target pointers change state based on what
states they are in and their types and storage classes)

$(LI passed to an `out` function parameter (changes state after the function returns),
treated the same as initialization)

$(LI passed by `ref` to a function parameter, treated as an assignment to a Borrow or a Readonly
depending on the storage class and type of the parameter)

$(LI returned from a function)

$(LI it is passed by value to a function parameter, which is
treated as an assignment to that parameter.)

$(LI it is implicitly passed by ref as a closure variable to a nested function)

$(LI the address of the pointer is taken, which is treated as assignment to whoever
receives the address)

$(LI the address of any part of the memory object graph is taken, which is
treated as assignment to whoever receives that address)

$(LI a pointer value is read from any part of the memory object graph,
which is treated as assignment to whoever receives that pointer)

$(LI merging of control flow reconciles the state of each variable based on the
states they have from each edge)
)

$(H3 $(LNAME2 borrower, 借用者は所有者になれる))

$(P Borrowers are considered Owners if they are initialized from other than
a pointer.
)

---
@live void uhoh()
{
    scope p = malloc();  // p is considered an Owner
    scope const pc = malloc(); // pc is not considered an Owner
} // dangling pointer pc is not detected on exit

---

$(H3 $(LNAME2 exception, 例外))

$(P The analysis assumes no exceptions are thrown.
)

---
@live void leaky()
{
    auto p = malloc();
    pitcher();  // throws exception, p leaks
    free(p);
}
---

$(P One solution is to use `scope(exit)`:
)

---
@live void waterTight()
{
    auto p = malloc();
    scope(exit) free(p);
    pitcher();
}
---

$(P or use RAII objects or call only `nothrow` functions.
)

$(H3 $(LNAME2 lazy, Lazy 引数))

$(P Lazy parameters are not considered.
)

$(H3 $(LNAME2 mempool, メモリプールの混合))

$(P Conflation of different memory pools:
)

---
void* xmalloc(size_t);
void xfree(void*);

void* ymalloc(size_t);
void yfree(void*);

auto p = xmalloc(20);
yfree(p);  // should call xfree() instead
---
$(P is not detected.
)

$(P This can be mitigated by using type-specific pools:
)

---
U* umalloc();
void ufree(U*);

V* vmalloc();
void vfree(V*);

auto p = umalloc();
vfree(p);  // type mismatch
---

$(P and perhaps disabling implicit conversions to `void*` in `@live` functions.
)

$(H3 $(LNAME2 vargs, 可変長引数関数の引数))

$(P Arguments to variadic functions (such as `printf`) are considered to be consumed.
)

$(SPEC_SUBNAV_PREV importc, Cのインポート[Import C])
)

Macros:
        CHAPTER=42
        TITLE=@live
